// Generated by CoffeeScript 1.6.3
/*
# This file, and all files in lib/common are for logic shared between
# the server and client, hence the weird definitions so that they work with
# both RequireJS (browser) and CommonJS (server)
*/


(function() {
  var myExports;

  myExports = null;

  if ((typeof process === "undefined" || process === null) || !process.versions) {
    window.BattleHelpers = {};
    myExports = window.BattleHelpers;
  } else {
    myExports = exports;
  }

  (function(exports) {
    /*
    # Add some convenience methods to the card model
    */

    exports.addCardMethods = function(model) {
      model.sumModifierProperty = function(prop) {
        var modifier, sum, _i, _len, _ref;
        if (this.modifiers == null) {
          return 0;
        }
        sum = 0;
        _ref = this.modifiers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          modifier = _ref[_i];
          if ((modifier.data != null) && (modifier.data[prop] != null)) {
            sum += modifier.data[prop];
          }
        }
        return sum;
      };
      model.getMaxHealth = function() {
        return this.maxHealth + this.sumModifierProperty('maxHealth');
      };
      model.getDamage = function() {
        return this.damage + this.sumModifierProperty('damage');
      };
      model.getEnergy = function() {
        return this.energy + this.sumModifierProperty('energy');
      };
      return model.getStatus = function() {
        var idx, modifier, status, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        status = [];
        status = status.concat(this.status);
        if (this.modifiers != null) {
          _ref = this.modifiers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            modifier = _ref[_i];
            if (modifier.data.addStatus != null) {
              status.push(modifier.data.addStatus);
            }
          }
          _ref1 = this.modifiers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            modifier = _ref1[_j];
            if (modifier.data.removeStatus != null) {
              idx = status.indexOf(modifier.data.removeStatus);
              if (idx !== -1) {
                status.splice(i, 1);
              }
            }
          }
          _ref2 = this.modifiers;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            modifier = _ref2[_k];
            if (modifier.data.removeStatusAll != null) {
              status = status.filter(function(s) {
                return s !== modifier.data.removeStatusAll;
              });
            }
          }
        }
        return status;
      };
    };
    /*
    # Add some convenience methods to the hero model
    */

    return exports.addHeroMethods = function(model) {
      model.sumModifierProperty = function(prop) {
        var modifier, sum, _i, _len, _ref;
        if (this.modifiers == null) {
          return 0;
        }
        sum = 0;
        _ref = this.modifiers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          modifier = _ref[_i];
          if ((modifier.data != null) && (modifier.data[prop] != null)) {
            sum += modifier.data[prop];
          }
        }
        return sum;
      };
      model.getMaxHealth = function() {
        return this.maxHealth + this.sumModifierProperty('maxHealth');
      };
      model.getDamage = function() {
        return this.damage + this.sumModifierProperty('damage');
      };
      return model.getStatus = function() {
        var idx, modifier, status, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        status = [];
        status = status.concat(this.status);
        if (this.modifiers != null) {
          _ref = this.modifiers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            modifier = _ref[_i];
            if (modifier.data.addStatus != null) {
              status.push(modifier.data.addStatus);
            }
          }
          _ref1 = this.modifiers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            modifier = _ref1[_j];
            if (modifier.data.removeStatus != null) {
              idx = status.indexOf(modifier.data.removeStatus);
              if (idx !== -1) {
                status.splice(i, 1);
              }
            }
          }
          _ref2 = this.modifiers;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            modifier = _ref2[_k];
            if (modifier.data.removeStatusAll != null) {
              status = status.filter(function(s) {
                return s !== modifier.data.removeStatusAll;
              });
            }
          }
        }
        return status;
      };
    };
  })(myExports);

}).call(this);
