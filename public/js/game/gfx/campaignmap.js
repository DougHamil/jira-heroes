// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['util', 'gui', 'engine', 'pixi', 'tween'], function(Util, GUI, engine) {
    var CampaignMap, TOKEN_COLORS;
    TOKEN_COLORS = [0xAA2200, 0x0022AA, 0xAA00AA, 0x22AA00];
    return CampaignMap = (function(_super) {
      __extends(CampaignMap, _super);

      function CampaignMap(data) {
        var conn, conns, destPos, g, hero, line, node, nodeClickHandler, pos, srcPos, _i, _len, _ref, _ref1, _ref2,
          _this = this;
        this.data = data;
        CampaignMap.__super__.constructor.apply(this, arguments);
        this.events = {};
        this.heroTokens = {};
        console.log(this.data);
        nodeClickHandler = function(node) {
          return function() {
            return _this.emit('nodeClicked', node);
          };
        };
        _ref = this.data["class"].map.nodes;
        for (node in _ref) {
          pos = _ref[node];
          g = new PIXI.Graphics();
          g.beginFill(GUI.STYLES.BUTTON_COLOR);
          g.drawCircle(0, 0, 20);
          g.interactive = true;
          g.hitArea = new PIXI.Circle(0, 0, 20);
          g.position = {
            x: pos.x,
            y: pos.y
          };
          g.click = nodeClickHandler(node);
          this.addChild(g);
        }
        _ref1 = this.data["class"].map.paths;
        for (node in _ref1) {
          conns = _ref1[node];
          srcPos = this.data["class"].map.nodes[node];
          for (_i = 0, _len = conns.length; _i < _len; _i++) {
            conn = conns[_i];
            destPos = this.data["class"].map.nodes[conn];
            line = new PIXI.Graphics();
            line.lineStyle(10, GUI.STYLES.BUTTON_COLOR, 1);
            line.moveTo(srcPos.x, srcPos.y);
            line.lineTo(destPos.x, destPos.y);
            this.addChild(line);
          }
        }
        _ref2 = this.data.heroPositions;
        for (hero in _ref2) {
          node = _ref2[hero];
          this.addHero(this.data.heroes[hero], node);
        }
      }

      CampaignMap.prototype.addHero = function(hero, node) {
        var g, pos, texture;
        this.data.heroes[hero.model._id] = hero;
        pos = this.data["class"].map.nodes[node];
        g = null;
        console.log("Adding hero: ");
        console.log(hero);
        if (hero.model.media.character.icon != null) {
          texture = PIXI.Texture.fromImage(hero.model.media.character.icon);
          g = new PIXI.Sprite(texture);
          g.scale = {
            x: 0.2,
            y: 0.2
          };
        } else {
          g = new PIXI.Graphics();
          g.beginFill(TOKEN_COLORS[Object.keys(this.heroTokens).length]);
          g.drawRect(-10, -50, 20, 50);
        }
        g.anchor = {
          x: 0.5,
          y: 1.0
        };
        g.position.x = pos.x;
        g.position.y = pos.y;
        this.addChild(g);
        return this.heroTokens[hero.model._id] = g;
      };

      CampaignMap.prototype.moveHero = function(hero, node) {
        var from, to, token;
        token = this.heroTokens[hero];
        from = token.position;
        to = this.data["class"].map.nodes[node];
        return Util.spriteTween(token, from, to, 500).easing(TWEEN.Easing.Cubic.Out).start();
      };

      CampaignMap.prototype.on = function(event, cb) {
        if (this.events[event] == null) {
          this.events[event] = [];
        }
        return this.events[event].push(cb);
      };

      CampaignMap.prototype.emit = function() {
        var args, cb, event, _i, _len, _ref, _results;
        event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this.events[event] != null) {
          _ref = this.events[event];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cb = _ref[_i];
            _results.push(cb.apply(null, args));
          }
          return _results;
        }
      };

      return CampaignMap;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
