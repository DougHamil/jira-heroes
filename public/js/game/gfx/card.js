// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['gfx/damageicon', 'gfx/healthicon', 'gfx/energyicon', 'gfx/styles', 'util', 'pixi', 'tween'], function(DamageIcon, HealthIcon, EnergyIcon, styles, Util) {
    var BACKGROUND_TEXTURE, CARD_SIZE, Card, IMAGE_MASK, IMAGE_PATH, IMAGE_POS, IMAGE_SIZE, MISSING_TEXTURE;
    CARD_SIZE = {
      width: 150,
      height: 225
    };
    IMAGE_POS = {
      x: 3,
      y: 3
    };
    IMAGE_SIZE = {
      width: 498 * (CARD_SIZE.width / 512),
      height: 498 * (CARD_SIZE.height / 768)
    };
    IMAGE_MASK = {
      width: IMAGE_SIZE.width,
      height: 336 * (CARD_SIZE.height / 768)
    };
    IMAGE_PATH = '/media/images/cards/';
    BACKGROUND_TEXTURE = PIXI.Texture.fromImage(IMAGE_PATH + 'background.png');
    MISSING_TEXTURE = PIXI.Texture.fromImage(IMAGE_PATH + 'missing.png');
    /*
    # Draws everything for a card, showing the image, damage, heatlh, status, etc.
    */

    return Card = (function(_super) {
      __extends(Card, _super);

      Card.Width = CARD_SIZE.width;

      Card.Height = CARD_SIZE.height;

      Card.FromClass = function(cardClass) {
        return new Card(cardClass, cardClass.damage, cardClass.health, []);
      };

      function Card(cardClass, damage, health, status) {
        var imageTexture;
        Card.__super__.constructor.call(this);
        imageTexture = PIXI.Texture.fromImage(IMAGE_PATH + cardClass.media.image);
        if (!imageTexture.baseTexture.hasLoaded) {
          console.log("Error loading " + cardClass.media.image);
        }
        this.backgroundSprite = new PIXI.Sprite(BACKGROUND_TEXTURE);
        this.backgroundSprite.width = CARD_SIZE.width;
        this.backgroundSprite.height = CARD_SIZE.height;
        this.imageSprite = new PIXI.Sprite(imageTexture);
        this.imageSprite.width = IMAGE_SIZE.width;
        this.imageSprite.height = IMAGE_SIZE.height;
        this.titleText = new PIXI.Text(cardClass.displayName, styles.CARD_TITLE);
        if (this.titleText.width >= this.backgroundSprite.width - 20) {
          this.titleText.width = this.backgroundSprite.width - 20;
        }
        this.energyIcon = new EnergyIcon(cardClass.energy);
        this.description = this.buildAbilityText(cardClass);
        this.description.position = {
          x: 5,
          y: this.backgroundSprite.height / 2 + 25
        };
        this.titleText.anchor = {
          x: 0.5,
          y: 0.5
        };
        this.titleText.position = {
          x: this.backgroundSprite.width / 2,
          y: this.backgroundSprite.height / 2 + 4
        };
        this.energyIcon.position = {
          x: 0,
          y: 0
        };
        this.imageSprite.position = {
          x: IMAGE_POS.x,
          y: IMAGE_POS.y
        };
        this.addChild(this.imageSprite);
        this.addChild(this.backgroundSprite);
        this.addChild(this.titleText);
        this.addChild(this.description);
        this.addChild(this.energyIcon);
        if (cardClass.playAbility == null) {
          this.healthIcon = new HealthIcon(health);
          this.damageIcon = new DamageIcon(damage);
          this.healthIcon.position = {
            x: this.backgroundSprite.width - this.healthIcon.width,
            y: this.backgroundSprite.height - this.healthIcon.height
          };
          this.damageIcon.position = {
            x: 0,
            y: this.backgroundSprite.height - this.damageIcon.height
          };
          this.addChild(this.healthIcon);
          this.addChild(this.damageIcon);
        }
        this.width = CARD_SIZE.width;
        this.height = CARD_SIZE.height;
        this.hitArea = new PIXI.Rectangle(0, 0, this.width, this.height);
        this.interactive = true;
      }

      Card.prototype.setHealth = function(health) {
        if (this.healthIcon != null) {
          return this.healthIcon.setHealth(health);
        }
      };

      Card.prototype.setDamage = function(damage) {
        if (this.damageIcon != null) {
          return this.damageIcon.setDamage(damage);
        }
      };

      Card.prototype.setEnergy = function(energy) {
        if (this.energyIcon != null) {
          return this.energyIcon.setEnergy(energy);
        }
      };

      Card.prototype.onHoverStart = function(cb) {
        var _this = this;
        return this.mouseover = function() {
          if (cb != null) {
            return cb(_this);
          }
        };
      };

      Card.prototype.onHoverEnd = function(cb) {
        var _this = this;
        return this.mouseout = function() {
          if (cb != null) {
            return cb(_this);
          }
        };
      };

      Card.prototype.onClick = function(cb) {
        var _this = this;
        return this.click = function() {
          if (cb != null) {
            return cb(_this);
          }
        };
      };

      Card.prototype.onMouseDown = function(cb) {
        var _this = this;
        return this.mousedown = function() {
          if (cb != null) {
            return cb(_this);
          }
        };
      };

      Card.prototype.onMouseUp = function(cb) {
        var _this = this;
        return this.mouseup = function() {
          if (cb != null) {
            return cb(_this);
          }
        };
      };

      Card.prototype.removeAllInteractions = function() {
        this.mouseover = null;
        this.mouseout = null;
        this.click = null;
        this.mousedown = null;
        return this.mouseup = null;
      };

      Card.prototype.createImageMask = function() {
        var mask;
        mask = new PIXI.Graphics();
        mask.beginFill();
        mask.drawRect(0, 0, IMAGE_MASK.width, IMAGE_MASK.height);
        mask.endFill();
        return mask;
      };

      Card.prototype.buildAbilityText = function(cardClass) {
        var ability, count, parent, text, _i, _len, _ref;
        parent = new PIXI.DisplayObjectContainer;
        count = 0;
        if ((cardClass.playAbility != null) && (cardClass.playAbility.text != null)) {
          text = this._buildAbilityText(cardClass.playAbility.text, cardClass.playAbility.data);
          text.position = {
            x: 0,
            y: count * text.height
          };
          count++;
          parent.addChild(text);
        }
        _ref = cardClass.passiveAbilities;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ability = _ref[_i];
          text = this._buildAbilityText(ability.text, ability.data);
          text.position = {
            x: 0,
            y: count * text.height
          };
          count++;
          parent.addChild(text);
        }
        if (__indexOf.call(cardClass.traits, 'taunt') >= 0) {
          text = new PIXI.Text("Taunt", styles.CARD_DESCRIPTION);
          text.position = {
            x: 0,
            y: count * text.height
          };
          count++;
          parent.addChild(text);
        }
        return parent;
      };

      Card.prototype._buildAbilityText = function(abilityText, abilityData) {
        var chunk, chunks, prop, string, _i, _len;
        chunks = abilityText.split(' ');
        string = "";
        for (_i = 0, _len = chunks.length; _i < _len; _i++) {
          chunk = chunks[_i];
          if (/^<\w+>$/.test(chunk)) {
            prop = chunk.replace(/[<>]/g, '');
            chunk = abilityData[prop];
            if (chunk == null) {
              chunk = "[UNKNOWN: " + prop + "]";
            }
          }
          string += chunk + ' ';
        }
        return new PIXI.Text(string, styles.CARD_DESCRIPTION);
      };

      return Card;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
