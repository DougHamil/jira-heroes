// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['gfx/textbutton', 'gfx/styles', 'util', 'engine', 'pixi', 'tween'], function(TextButton, STYLES, Util, engine) {
    /*
    # Presents cards as a grid with pages
    */

    var PagedCardGrid;
    return PagedCardGrid = (function(_super) {
      __extends(PagedCardGrid, _super);

      function PagedCardGrid(width, height, padding, cardsPerRow, rowsPerPage, cardSprites) {
        var card, cardHeight, cardIndex, cardWidth, pageContainer, xpos, ypos, _i, _len, _ref,
          _this = this;
        this.width = width;
        this.height = height;
        this.padding = padding;
        this.cardsPerRow = cardsPerRow;
        this.rowsPerPage = rowsPerPage;
        this.cardSprites = cardSprites;
        PagedCardGrid.__super__.constructor.apply(this, arguments);
        if ((this.cardSprites != null) && this.cardSprites.length > 0) {
          cardHeight = this.cardSprites[0].height;
          cardWidth = this.cardSprites[0].width;
          this.width = this.cardsPerRow * cardWidth + (this.cardsPerRow + 1) * this.padding;
          this.height = this.rowsPerPage * cardHeight + (this.rowsPerPage + 1) * this.padding;
        }
        this.nextBtn = new TextButton('Next Page');
        this.prevBtn = new TextButton('Last Page');
        this.nextBtn.position = {
          x: this.width - this.nextBtn.width,
          y: this.height + this.nextBtn.height
        };
        this.prevBtn.position = {
          x: 0,
          y: this.height + this.prevBtn.height
        };
        this.nextBtn.onClick(function() {
          return _this.nextPage();
        });
        this.prevBtn.onClick(function() {
          return _this.prevPage();
        });
        this.pages = [];
        pageContainer = new PIXI.DisplayObjectContainer;
        cardIndex = 0;
        _ref = this.cardSprites;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          pageContainer.addChild(card);
          xpos = this.padding + ((cardIndex % this.cardsPerRow) * (this.padding + card.width));
          ypos = Math.floor(cardIndex / this.cardsPerRow) * (this.padding + card.height) + this.padding;
          card.position = {
            x: xpos,
            y: ypos
          };
          cardIndex++;
          if (cardIndex === (this.cardsPerRow * this.rowsPerPage)) {
            cardIndex = 0;
            this.pages.push(pageContainer);
            pageContainer = new PIXI.DisplayObjectContainer;
          }
        }
        if (cardIndex !== 0) {
          this.pages.push(pageContainer);
        }
        this.setPageIndex(0);
      }

      PagedCardGrid.prototype.nextPage = function() {
        return this.setPageIndex(this.pageIndex + 1);
      };

      PagedCardGrid.prototype.prevPage = function() {
        return this.setPageIndex(this.pageIndex - 1);
      };

      PagedCardGrid.prototype.setPageIndex = function(index) {
        if ((this.pageIndex != null) && index >= this.pages.length || index < 0 || index === this.pageIndex) {

        } else {
          if (this.pageIndex === 0) {
            this.prevBtn.visible = true;
          }
          if (this.pageIndex === (this.pages.length - 1)) {
            this.nextBtn.visible = true;
          }
          if (index === (this.pages.length - 1)) {
            this.nextBtn.visible = false;
          } else if (index === 0) {
            this.prevBtn.visible = false;
          }
          if (this.pageIndex != null) {
            this.removeChild(this.pages[this.pageIndex]);
          }
          this.pageIndex = index;
          return this.addChild(this.pages[this.pageIndex]);
        }
      };

      return PagedCardGrid;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
