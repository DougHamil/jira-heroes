// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['gfx/styles', 'gfx/card', 'gfx/pagedcardgrid', 'util', 'engine', 'pixi', 'tween'], function(STYLES, Card, PagedCardGrid, Util, engine) {
    var CardPicker, HEIGHT, WIDTH;
    HEIGHT = engine.HEIGHT - 100;
    WIDTH = engine.WIDTH - engine.WIDTH / 4;
    /*
    # Presents an interface to allow the user to pick a card from the list of avaiable cards
    */

    return CardPicker = (function(_super) {
      __extends(CardPicker, _super);

      function CardPicker(cards, cardClasses) {
        var card, cardId, onClick, sprite, _i, _len, _ref,
          _this = this;
        this.cards = cards;
        this.cardClasses = cardClasses;
        CardPicker.__super__.constructor.apply(this, arguments);
        this.cardSprites = {};
        _ref = this.cards;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          onClick = function(cardId) {
            return function() {
              if (_this.onCardPickedCallback != null) {
                return _this.onCardPickedCallback(cardId);
              }
            };
          };
          sprite = Card.FromClass(this.cardClasses[card]);
          sprite.onClick(onClick(card));
          this.cardSprites[card] = sprite;
        }
        this.cardGrid = new PagedCardGrid(WIDTH, HEIGHT, 10, 4, 2, (function() {
          var _ref1, _results;
          _ref1 = this.cardSprites;
          _results = [];
          for (cardId in _ref1) {
            card = _ref1[cardId];
            _results.push(card);
          }
          return _results;
        }).call(this));
        WIDTH = this.cardGrid.width;
        HEIGHT = this.cardGrid.height;
        this.bg = new PIXI.Graphics();
        this.bg.width = WIDTH;
        this.bg.height = HEIGHT;
        this.bg.beginFill(STYLES.BUTTON_COLOR);
        this.bg.drawRect(0, 0, this.bg.width, this.bg.height);
        this.width = this.bg.width;
        this.height = this.bg.height;
        this.addChild(this.bg);
        this.addChild(this.cardGrid);
      }

      CardPicker.prototype.onCardPicked = function(onCardPickedCallback) {
        this.onCardPickedCallback = onCardPickedCallback;
      };

      return CardPicker;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
