// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['gfx/styles', 'util', 'engine', 'pixi', 'tween'], function(STYLES, Util, engine) {
    var CardFan, HEIGHT, PADDING, WIDTH;
    HEIGHT = engine.HEIGHT - 100;
    WIDTH = engine.WIDTH - engine.WIDTH / 4;
    PADDING = 20;
    /*
    # Presents the cards in the player's hand while in battle.
    */

    return CardFan = (function(_super) {
      __extends(CardFan, _super);

      function CardFan(origin, sprites) {
        var s;
        this.origin = origin;
        CardFan.__super__.constructor.apply(this, arguments);
        this.cardSprites = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = sprites.length; _i < _len; _i++) {
            s = sprites[_i];
            _results.push(s);
          }
          return _results;
        })();
        this.update();
      }

      CardFan.prototype.update = function() {
        var card, index, posx, posy, startx, _i, _len, _ref, _results;
        index = 0;
        if (this.cardSprites.length > 0) {
          startx = this.origin.x - ((this.cardSprites.length / 2) * this.cardSprites[0].width / 2);
        } else {
          startx = this.origin.x;
        }
        _ref = this.cardSprites;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          posx = startx + index * card.width + PADDING;
          posy = this.origin.y - card.height;
          _results.push(card.position = {
            x: posx,
            y: posy
          });
        }
        return _results;
      };

      CardFan.prototype.addCard = function(cardSprite) {
        this.cardSprites.push(card);
        return this.update();
      };

      CardFan.prototype.removeCard = function(card) {
        this.cardSprites = this.cardSprites.filter(function(c) {
          return c !== card;
        });
        return this.update();
      };

      return CardFan;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
