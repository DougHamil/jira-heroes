// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['util', 'engine', 'eventemitter', 'battlehelpers', 'pixi'], function(Util, engine, EventEmitter) {
    /*
    # Handles changes to the battle's state
    */

    var Battle;
    return Battle = (function(_super) {
      __extends(Battle, _super);

      function Battle(userId, model, socket) {
        var card, opp, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4,
          _this = this;
        this.userId = userId;
        this.model = model;
        this.socket = socket;
        Battle.__super__.constructor.apply(this, arguments);
        this.cardsById = {};
        _ref = this.model.you.hand;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          this.cardsById[card._id] = card;
          BattleHelpers.addCardMethods(card);
        }
        _ref1 = this.model.you.field;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          card = _ref1[_j];
          this.cardsById[card._id] = card;
          BattleHelpers.addCardMethods(card);
        }
        _ref2 = this.model.opponents;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          opp = _ref2[_k];
          _ref3 = opp.hand;
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            card = _ref3[_l];
            this.cardsById[card] = card;
          }
          _ref4 = opp.field;
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            card = _ref4[_m];
            this.cardsById[card._id] = card;
            BattleHelpers.addCardMethods(card);
          }
        }
        this.socket.on('player-connected', function(userId) {
          return _this.onPlayerConnected(userId);
        });
        this.socket.on('player-disconnected', function(userId) {
          return _this.onPlayerDisconnected(userId);
        });
        this.socket.on('your-turn', function(actions) {
          return _this.processAndEmit('your-turn', actions);
        });
        this.socket.on('opponent-turn', function(actions) {
          return _this.processAndEmit('opponent-turn', actions);
        });
        this.socket.on('phase', function(oldPhase, newPhase) {
          return _this.onPhaseChanged(oldPhase, newPhase);
        });
        this.socket.on('action', function(actions) {
          return _this.processAndEmit('action', actions);
        });
      }

      Battle.prototype.processAndEmit = function(event, actions) {
        var action, _i, _len;
        for (_i = 0, _len = actions.length; _i < _len; _i++) {
          action = actions[_i];
          this.process(action);
        }
        return this.emit(event, actions);
      };

      Battle.prototype.process = function(action) {
        var card, hero, target;
        switch (action.type) {
          case 'add-modifier':
            target = this.getCard(action.target);
            if (target == null) {
              target = this.getHero(action.target);
            }
            if (target != null) {
              target.modifiers.push(action.modifier);
              console.log(target.getStatus());
            }
            break;
          case 'remove-modifier':
            target = this.getCard(action.target);
            if (target == null) {
              target = this.getHero(action.target);
            }
            if (target != null) {
              target.modifiers = target.modifiers.filter(function(m) {
                return m._id !== action.modifier;
              });
            }
            break;
          case 'status-add':
            target = this.getCard(action.target);
            if (target == null) {
              target = this.getHero(action.target);
            }
            if (target != null) {
              if (target.status == null) {
                target.status = [];
              }
              target.status.push(action.status);
            }
            break;
          case 'status-remove':
            target = this.getCard(action.target);
            if (target == null) {
              target = this.getHero(action.target);
            }
            if (target != null) {
              if (target.status == null) {
                target.status = [];
              }
              target.status = target.status.filter(function(s) {
                return s !== action.status;
              });
            }
            break;
          case 'heal':
            card = this.getCard(action.target);
            if (card != null) {
              card.health += action.amount;
            } else {
              hero = this.getHero(action.target);
              if (hero != null) {
                hero.health += action.amount;
              }
            }
            break;
          case 'damage':
            card = this.getCard(action.target);
            if (card != null) {
              card.health -= action.damage;
            } else {
              hero = this.getHero(action.target);
              if (hero != null) {
                hero.health -= action.damage;
                console.log(hero.health);
              }
            }
            break;
          case 'discard-card':
            card = this.getCard(action.card);
            if (card != null) {
              card.position = 'discard';
            }
            break;
          case 'start-turn':
            this.model.activePlayer = action.player;
            break;
          case 'draw-card':
            if (action.card._id != null) {
              this.cardsById[action.card._id] = action.card;
              BattleHelpers.addCardMethods(action.card);
            }
            this.getPlayer(action.player).hand.push(action.card);
            break;
          case 'max-energy':
            this.getPlayer(action.player).maxEnergy += action.amount;
            break;
          case 'energy':
            this.getPlayer(action.player).energy += action.amount;
            break;
          case 'play-card':
            if (action.card._id != null) {
              this.cardsById[action.card._id] = action.card;
              BattleHelpers.addCardMethods(action.card);
            }
            this.getPlayer(action.player).field.push(action.card);
            break;
          case 'cast-card':
            if (action.card._id != null) {
              this.cardsById[action.card._id] = action.card;
              BattleHelpers.addCardMethods(action.card);
            }
        }
        console.log(action);
        return this.emit('action-' + action.type, action);
      };

      Battle.prototype.onPhaseChanged = function(oldPhase, newPhase) {
        this.model.state.phase = newPhase;
        return this.emit('phase', oldPhase, newPhase);
      };

      Battle.prototype.onPlayerConnected = function(userId) {
        this.model.connectedPlayers.push(userId);
        return this.emit('player-connected', userId);
      };

      Battle.prototype.onPlayerDisconnected = function(userId) {
        this.model.connectedPlayers = this.model.connectedPlayers.filter(function(p) {
          return p !== userId;
        });
        return this.emit('player-disconnected', userId);
      };

      Battle.prototype.getPlayer = function(id) {
        var user, _i, _len, _ref;
        if (id === this.userId) {
          return this.model.you;
        } else {
          _ref = this.model.opponents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            user = _ref[_i];
            if (user.userId === id) {
              return user;
            }
          }
          return null;
        }
      };

      Battle.prototype.getConnectedPlayers = function() {
        return this.model.connectedPlayers;
      };

      Battle.prototype.getPhase = function() {
        return this.model.state.phase;
      };

      Battle.prototype.getCard = function(id) {
        if (id._id != null) {
          return id;
        }
        return this.cardsById[id];
      };

      Battle.prototype.getCardsInHand = function() {
        return this.model.you.hand;
      };

      Battle.prototype.getEnemyCardsInHand = function() {
        var cards, enemy, _i, _len, _ref;
        cards = [];
        _ref = this.model.opponents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          enemy = _ref[_i];
          cards = cards.concat(enemy.hand);
        }
        return cards;
      };

      Battle.prototype.getCardsOnField = function() {
        return this.model.you.field;
      };

      Battle.prototype.getEnemyCardsOnField = function() {
        var cards, enemy, _i, _len, _ref;
        cards = [];
        _ref = this.model.opponents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          enemy = _ref[_i];
          cards = cards.concat(enemy.field);
        }
        return cards;
      };

      Battle.prototype.getEnergy = function() {
        return this.model.you.energy;
      };

      Battle.prototype.getMaxEnergy = function() {
        return this.model.you.maxEnergy;
      };

      Battle.prototype.getHeroById = function(heroId) {
        var opp, _i, _len, _ref;
        if (heroId === this.model.you.hero._id) {
          return this.model.you.hero;
        }
        _ref = this.model.opponents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opp = _ref[_i];
          if (opp.hero._id === heroId) {
            return opp.hero;
          }
        }
        return null;
      };

      Battle.prototype.getHero = function(heroId) {
        if (heroId != null) {
          return this.getHeroById(heroId);
        }
        return this.getMyHero();
      };

      Battle.prototype.getMyHero = function() {
        return this.model.you.hero;
      };

      Battle.prototype.getEnemyHero = function() {
        return this.model.opponents[0].hero;
      };

      Battle.prototype.isYourTurn = function() {
        return this.model.activePlayer === this.userId;
      };

      Battle.prototype.emitEndTurnEvent = function() {
        return this.socket.emit('end-turn');
      };

      Battle.prototype.emitPlayCardEvent = function(cardId, target, cb) {
        return this.socket.emit('play-card', cardId, target, cb);
      };

      Battle.prototype.emitUseCardEvent = function(cardId, target, cb) {
        return this.socket.emit('use-card', cardId, target, cb);
      };

      return Battle;

    })(EventEmitter);
  });

}).call(this);
