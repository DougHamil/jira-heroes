// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(['util', 'engine'], function(Util, engine) {
    var GameManager;
    return GameManager = (function() {
      function GameManager(hero, campaign) {
        var _this = this;
        this.hero = hero;
        this.campaign = campaign;
        this.events = {};
        this.unhandledEvents = {};
        this.socket = io.connect();
        this.socket.on('connected', function() {
          return _this.onConnected();
        });
        this.socket.on('disconnect', function() {
          return _this.onDisconnected();
        });
      }

      GameManager.prototype.moveTo = function(node, cb) {
        return this.socket.emit('move', node, cb);
      };

      GameManager.prototype.onDisconnected = function() {
        console.log('Disconnected from game server.');
        return this.emit('disconnect');
      };

      GameManager.prototype.onConnected = function() {
        var _this = this;
        console.log("Joining campaign...");
        return this.socket.emit('join', this.hero._id, this.campaign._id, function(err, data) {
          if (err != null) {
            return _this.socket.disconnect();
          } else {
            console.log("Emitting event");
            return _this.emit('joined', data);
          }
        });
      };

      GameManager.prototype.disconnect = function() {
        return this.socket.disconnect();
      };

      GameManager.prototype.on = function(event, cb) {
        if (this.events[event] == null) {
          this.events[event] = [];
        }
        return this.events[event].push(cb);
      };

      GameManager.prototype.emit = function() {
        var args, cb, event, _i, _len, _ref, _results;
        event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this.events[event] != null) {
          _ref = this.events[event];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cb = _ref[_i];
            _results.push(cb.apply(null, args));
          }
          return _results;
        }
      };

      return GameManager;

    })();
  });

}).call(this);
