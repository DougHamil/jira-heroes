// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['jquery', 'jiraheroes', 'gui', 'engine', 'pixi'], function($, JH, GUI, engine) {
    var DECK_BUTTON_PADDING, EditDeck, MAX_DECK_SIZE;
    DECK_BUTTON_PADDING = 10;
    MAX_DECK_SIZE = 30;
    return EditDeck = (function(_super) {
      __extends(EditDeck, _super);

      function EditDeck(manager, myStage) {
        var _this = this;
        this.manager = manager;
        this.myStage = myStage;
        EditDeck.__super__.constructor.apply(this, arguments);
        this.heading = new PIXI.Text('Edit Deck', GUI.STYLES.HEADING);
        this.backBtn = new GUI.TextButton('Back');
        this.backBtn.position = {
          x: 20,
          y: engine.HEIGHT - this.backBtn.height - 20
        };
        this.backBtn.onClick(function() {
          return _this.manager.activateView('Decks');
        });
        this.saveBtn = new GUI.TextButton('Save');
        this.saveBtn.position = {
          x: 20,
          y: this.backBtn.position.y - this.saveBtn.height - 20
        };
        this.saveBtn.onClick(function() {
          return _this.saveDeck();
        });
        this.addChild(this.heading);
        this.addChild(this.backBtn);
        this.addChild(this.saveBtn);
      }

      EditDeck.prototype.saveDeck = function() {
        var _this = this;
        this.saveBtn.disable();
        return JH.SetDeckCards(this.deck._id, this.deck.cards, function() {
          _this.saveBtn.enable();
          return _this.manager.activateView('Decks');
        });
      };

      EditDeck.prototype.removeCard = function(cardId) {
        if (__indexOf.call(this.deck.cards, cardId) >= 0) {
          this.deck.cards.splice(this.deck.cards.indexOf(cardId), 1);
          this.cardList.update();
          return this.updateCardCount();
        }
      };

      EditDeck.prototype.onCardPicked = function(cardId) {
        if (this.deck.cards.length < MAX_DECK_SIZE) {
          this.deck.cards.push(cardId);
          this.cardList.update();
          return this.updateCardCount();
        } else {
          return alert('You may not have more than ' + MAX_DECK_SIZE + ' cards in a single deck.');
        }
      };

      EditDeck.prototype.updateCardCount = function() {
        return this.cardCount.setText("" + this.deck.cards.length + "/" + MAX_DECK_SIZE);
      };

      EditDeck.prototype.activate = function(deck) {
        var _this = this;
        this.deck = deck;
        this.cardList = new GUI.DeckCardList(this.deck, JH.cards);
        this.cardList.position = {
          x: engine.WIDTH - this.cardList.width,
          y: 50
        };
        this.cardList.onCardEntryClicked(function(cardId) {
          return _this.removeCard(cardId);
        });
        this.cardPicker = new GUI.CardPicker(JH.user.library, JH.cards);
        this.cardPicker.onCardPicked(function(cardId) {
          return _this.onCardPicked(cardId);
        });
        this.cardPicker.position = {
          x: 20,
          y: 50
        };
        this.deckTitle = new PIXI.Text(this.deck.name, GUI.STYLES.TEXT);
        this.deckTitle.position = {
          x: this.cardList.position.x,
          y: this.cardList.position.y - this.deckTitle.height
        };
        this.cardCount = new PIXI.Text("" + this.deck.cards.length + "/" + MAX_DECK_SIZE, GUI.STYLES.TEXT);
        this.cardCount.position = {
          x: this.cardList.position.x + (this.cardList.width / 2) - this.cardCount.width / 2,
          y: this.cardList.position.y + this.cardList.height
        };
        this.addChild(this.cardList);
        this.addChild(this.cardPicker);
        this.addChild(this.deckTitle);
        this.addChild(this.cardCount);
        return this.myStage.addChild(this);
      };

      EditDeck.prototype.deactivate = function() {
        this.myStage.removeChild(this);
        this.removeChild(this.cardList);
        this.removeChild(this.cardPicker);
        this.removeChild(this.deckTitle);
        return this.removeChild(this.cardCount);
      };

      return EditDeck;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
