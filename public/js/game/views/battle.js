// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jiraheroes', 'gui', 'cardanimator', 'client/battlemanager', 'engine', 'pixi'], function($, JH, GUI, CardAnimator, BattleManager, engine) {
    var BACKDROP_TEXTURE, Battle;
    BACKDROP_TEXTURE = PIXI.Texture.fromImage('/media/images/backdrop.png');
    /*
    # This view displays the actual battle part of the game to the player
    */

    return Battle = (function(_super) {
      __extends(Battle, _super);

      function Battle(manager, myStage) {
        this.manager = manager;
        this.myStage = myStage;
        Battle.__super__.constructor.apply(this, arguments);
        this.backdropImage = new PIXI.Sprite(BACKDROP_TEXTURE);
        this.statusText = new PIXI.Text('Hosting battle...', GUI.STYLES.TEXT);
        this.winBattleText = new PIXI.Text('You won!', GUI.STYLES.HEADING);
        this.loseBattleText = new PIXI.Text('You lost', GUI.STYLES.HEADING);
        this.winBattleText.position = {
          x: engine.WIDTH / 2 - this.winBattleText.width / 2,
          y: engine.HEIGHT / 2 - this.winBattleText.height / 2
        };
        this.loseBattleText.position = {
          x: engine.WIDTH / 2 - this.loseBattleText.width / 2,
          y: engine.HEIGHT / 2 - this.loseBattleText.height / 2
        };
        this.setStatusText('Connecting to battle...');
        this.uiLayer = new PIXI.DisplayObjectContainer();
        this.gfxLayer = new PIXI.DisplayObjectContainer();
        this.addChild(this.backdropImage);
        this.addChild(this.gfxLayer);
        this.addChild(this.uiLayer);
        this.uiLayer.addChild(this.statusText);
      }

      Battle.prototype.setStatusText = function(text) {
        return this.statusText.setText(text);
      };

      Battle.prototype.initUI = function(phase) {
        var _this = this;
        if (this.innerStage != null) {
          this.removeChild(this.innerStage);
        }
        this.innerStage = new PIXI.DisplayObjectContainer;
        if (phase === 'game') {
          this.endTurnButton = new GUI.EndTurnButton();
          this.endTurnButton.position = {
            x: engine.WIDTH - 20 - this.endTurnButton.width,
            y: engine.HEIGHT / 2 - this.endTurnButton.height / 2
          };
          this.endTurnButton.onClick(function() {
            return _this.battle.emitEndTurnEvent();
          });
          this.energySprite = new PIXI.Text(this.battle.getEnergy() + " energy", GUI.STYLES.TEXT);
          this.energySprite.position = {
            x: engine.WIDTH - 20 - this.energySprite.width,
            y: 20
          };
          this.cardAnimator = new CardAnimator(JH.heroes, JH.cards, JH.user._id, this.battle);
          this.uiLayer.addChild(this.energySprite);
          this.gfxLayer.addChild(this.cardAnimator);
          this.uiLayer.addChild(this.endTurnButton);
          this.battle.on('action-win-battle', function(action) {
            if (action.player === JH.user._id) {
              _this.removeChild(_this.gfxLayer);
              _this.removeChild(_this.backdropImage);
              return _this.uiLayer.addChild(_this.winBattleText);
            }
          });
          this.battle.on('action-lose-battle', function(action) {
            if (action.player === JH.user._id) {
              _this.removeChild(_this.gfxLayer);
              _this.removeChild(_this.backdropImage);
              return _this.uiLayer.addChild(_this.loseBattleText);
            }
          });
        }
        return this.addChild(this.innerStage);
      };

      Battle.prototype.updateEnergy = function() {
        return this.energySprite.setText(this.battle.getEnergy() + " energy");
      };

      Battle.prototype.createCardSprite = function(card) {
        var sprite;
        sprite = new GUI.Card(JH.cards[card["class"]], card.damage, card.health, card.status);
        return sprite;
      };

      Battle.prototype.onBattleStatus = function(status) {
        if ((status != null) && status.id === 'BATTLE_NOT_READY') {
          return this.setStatusText('Waiting for opponent to join...');
        }
      };

      Battle.prototype.onBattleJoined = function(battle) {
        var updateStatus,
          _this = this;
        this.battle = battle;
        updateStatus = function() {
          return _this.setStatusText(_this.battle.getConnectedPlayers().length + ' players connected.');
        };
        this.battle.on('player-connected', function() {
          return updateStatus();
        });
        this.battle.on('player-disconnected', function() {
          return updateStatus();
        });
        this.battle.on('your-turn', function() {
          return _this.setYourTurn(true);
        });
        this.battle.on('opponent-turn', function() {
          return _this.setYourTurn(false);
        });
        this.battle.on('phase', function(o, n) {
          return _this.initUI(n);
        });
        this.battle.on('action-energy', function() {
          return _this.updateEnergy();
        });
        this.battle.on('action-max-energy', function() {
          return _this.updateEnergy();
        });
        updateStatus();
        this.initUI(this.battle.getPhase());
        this.updateEnergy();
        return this.setYourTurn(this.battle.isYourTurn());
      };

      Battle.prototype.setYourTurn = function(isYourTurn) {
        if (isYourTurn) {
          return this.setStatusText("It's your turn!");
        } else {
          return this.setStatusText("Opponent's turn");
        }
      };

      Battle.prototype.activate = function(battle) {
        var _this = this;
        this.battle = battle;
        this.myStage.addChild(this);
        this.battleManager = new BattleManager(JH.user, this.battle._id);
        this.battleManager.on('connected', function() {});
        this.battleManager.on('battle-ready', function() {
          _this.setStatusText('Battle is ready!');
          return _this.battleManager.join();
        });
        this.battleManager.on('battle-status', function(status) {
          return _this.onBattleStatus(status);
        });
        return this.battleManager.on('joined', function(battle) {
          return _this.onBattleJoined(battle);
        });
      };

      Battle.deactivate = function() {
        this.myStage.removeChild(this);
        if (this.innerStage != null) {
          this.removeChild(this.innerStage);
          this.innerStage = null;
        }
        if (this.cardAnimator != null) {
          this.removeChild(this.cardAnimator);
          return this.cardAnimator = null;
        }
      };

      return Battle;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
