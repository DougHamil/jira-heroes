// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['jquery', 'jiraheroes', 'gui', 'engine', 'pixi'], function($, JH, GUI, engine) {
    var JoinBattle;
    return JoinBattle = (function(_super) {
      __extends(JoinBattle, _super);

      function JoinBattle(manager, myStage) {
        var _this = this;
        this.manager = manager;
        this.myStage = myStage;
        JoinBattle.__super__.constructor.apply(this, arguments);
        this.heading = new PIXI.Text('Join a Battle', GUI.STYLES.HEADING);
        this.deckPick = new PIXI.DisplayObjectContainer;
        this.subheading = new PIXI.Text('Pick a deck to battle with:', GUI.STYLES.TEXT);
        this.subheading.position = {
          x: 20,
          y: this.heading.position.y + this.heading.height + 5
        };
        this.deckPick.addChild(this.subheading);
        this.deckPick.visible = false;
        this.backBtn = new GUI.TextButton('Back');
        this.backBtn.position = {
          x: 20,
          y: engine.HEIGHT - this.backBtn.height - 20
        };
        this.backBtn.onClick(function() {
          return _this.manager.activateView('MainMenu');
        });
        this.addChild(this.heading);
        this.addChild(this.backBtn);
        this.addChild(this.deckPick);
      }

      JoinBattle.prototype.joinBattleWithDeck = function(battleId, deckId) {
        var _this = this;
        if ((battleId != null) && (this.decks[deckId] != null)) {
          return JH.JoinBattle(battleId, deckId, function(battle) {
            return _this.manager.activateView('Battle', battle);
          });
        }
      };

      JoinBattle.prototype.onBattlePicked = function(battleId) {
        this.pickedBattleId = battleId;
        this.deckPick.visible = true;
        return this.battlePicker.visible = false;
      };

      JoinBattle.prototype.activate = function() {
        var activate,
          _this = this;
        activate = function(users, battles, decks) {
          var deck, user, usersById, _i, _j, _len, _len1;
          _this.battles = battles;
          _this.decks = decks;
          usersById = {};
          for (_i = 0, _len = users.length; _i < _len; _i++) {
            user = users[_i];
            usersById[user._id] = user;
          }
          _this.battlePicker = new GUI.BattlePicker(battles, usersById);
          _this.battlePicker.onBattlePicked(function(battleId) {
            return _this.onBattlePicked(battleId);
          });
          _this.battlePicker.position = {
            x: 0,
            y: 100
          };
          _this.addChild(_this.battlePicker);
          decks = decks.filter(function(d) {
            return d.cards.length === 30;
          });
          if (decks.length > 0) {
            _this.decks = {};
            for (_j = 0, _len1 = decks.length; _j < _len1; _j++) {
              deck = decks[_j];
              _this.decks[deck._id] = deck;
            }
            _this.deckList = new GUI.DeckPicker(decks, JH.heroes);
            _this.deckList.position = {
              x: 0,
              y: 100
            };
            _this.deckList.onDeckPicked(function(deckId) {
              return _this.joinBattleWithDeck(_this.pickedBattleId, deckId);
            });
          } else {
            _this.deckList = new PIXI.Text('You do not own any full decks', GUI.STYLES.WARNING);
            _this.deckList.position = {
              x: 0,
              y: 100
            };
          }
          _this.deckPick.addChild(_this.deckList);
          _this.deckPick.visible = false;
          return _this.myStage.addChild(_this);
        };
        return JH.GetOpenBattles(function(battles) {
          var userIds;
          userIds = battles.map(function(b) {
            return b.users[0];
          });
          battles = battles.filter(function(b) {
            var _ref;
            return _ref = JH.user._id, __indexOf.call(b.users, _ref) < 0;
          });
          return JH.GetUsers(userIds, function(users) {
            return JH.GetAllDecks(function(decks) {
              return activate(users, battles, decks);
            });
          });
        });
      };

      JoinBattle.prototype.deactivate = function() {
        this.removeChild(this.battlePicker);
        this.deckPick.removeChild(this.deckList);
        return this.myStage.removeChild(this);
      };

      return JoinBattle;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
