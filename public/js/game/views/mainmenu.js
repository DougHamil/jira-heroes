// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jiraheroes', 'engine', 'gui', 'pixi'], function(JH, engine, GUI) {
    var MainMenu;
    return MainMenu = (function(_super) {
      __extends(MainMenu, _super);

      function MainMenu(manager, stage) {
        var _this = this;
        this.manager = manager;
        MainMenu.__super__.constructor.apply(this, arguments);
        this.myStage = stage;
        this.menuText = new PIXI.Text('JIRA Heroes', GUI.STYLES.HEADING);
        this.hostBtn = new GUI.TextButton('Host Battle');
        this.joinBtn = new GUI.TextButton('Join Battle');
        this.decksBtn = new GUI.TextButton('Decks');
        this.libraryBtn = new GUI.TextButton('Library');
        this.hostBtn.position = {
          x: (engine.WIDTH / 2) - this.hostBtn.width / 2,
          y: engine.HEIGHT / 2
        };
        this.joinBtn.position = {
          x: (engine.WIDTH / 2) - this.joinBtn.width / 2,
          y: this.hostBtn.position.y + 2 * this.joinBtn.height
        };
        this.decksBtn.position = {
          x: (engine.WIDTH / 2) - this.decksBtn.width / 2,
          y: this.joinBtn.position.y + 2 * this.decksBtn.height
        };
        this.libraryBtn.position = {
          x: (engine.WIDTH / 2) - this.libraryBtn.width / 2,
          y: this.decksBtn.position.y + 2 * this.libraryBtn.height
        };
        this.libraryBtn.onClick(function() {
          return _this.manager.activateView('Library');
        });
        this.addChild(this.menuText);
        this.addChild(this.hostBtn);
        this.addChild(this.joinBtn);
        this.addChild(this.decksBtn);
        this.addChild(this.libraryBtn);
      }

      MainMenu.prototype.deactivate = function() {
        this.myStage.removeChild(this);
        if (JH.pointsText != null) {
          this.removeChild(JH.pointsText);
        }
        if (JH.nameText != null) {
          return this.removeChild(JH.nameText);
        }
      };

      MainMenu.prototype.activate = function() {
        var activate,
          _this = this;
        activate = function(user) {
          JH.user = user;
          _this.myStage.addChild(_this);
          JH.nameText = new PIXI.Text("" + user.name, GUI.STYLES.TEXT);
          JH.nameText.position = {
            x: engine.WIDTH - JH.nameText.width,
            y: 0
          };
          JH.pointsText = new GUI.GlyphText("" + user.points + " <coin>");
          JH.pointsText.position = {
            x: engine.WIDTH - JH.pointsText.width - 20,
            y: engine.HEIGHT - JH.pointsText.height - 20
          };
          _this.addChild(JH.pointsText);
          return _this.addChild(JH.nameText);
        };
        if (JH.user == null) {
          return JH.GetUser(activate);
        } else {
          return activate(JH.user);
        }
      };

      return MainMenu;

    })(PIXI.DisplayObjectContainer);
  });

}).call(this);
